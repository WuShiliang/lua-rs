pub type Instruction = u32;

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum OpCode {
    Move = 0,
    LoadConstant,
    LoadConstantEx,
    LoadBool,
    LoadNil,
    GetUpValue,
    GetTableUp,
    GetTable,
    SetTableUp,
    SetUpValue,
    SetTable,
    NewTable,
    SELF,
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    Pow,
    UnaryMinus,
    Not,
    Length,
    Concat,
    Jump,
    Equal,
    LessThan,
    LessOrEqual,
    Test,
    TestSet,
    Call,
    TailCall,
    Return,
    ForLoop,
    ForPrep,
    TForCall,
    TForLoop,
    SetList,
    Closure,
    VarArg,
    ExtraArg,
}

static OP_NAMES: &'static [&'static str; (OpCode::ExtraArg as usize + 1)] = &[
    "MOVE",
    "LOADK",
    "LOADKX",
    "LOADBOOL",
    "LOADNIL",
    "GETUPVAL",
    "GETTABUP",
    "GETTABLE",
    "SETTABUP",
    "SETUPVAL",
    "SETTABLE",
    "NEWTABLE",
    "SELF",
    "ADD",
    "SUB",
    "MUL",
    "DIV",
    "MOD",
    "POW",
    "UNM",
    "NOT",
    "LEN",
    "CONCAT",
    "JMP",
    "EQ",
    "LT",
    "LE",
    "TEST",
    "TESTSET",
    "CALL",
    "TAILCALL",
    "RETURN",
    "FORLOOP",
    "FORPREP",
    "TFORCALL",
    "TFORLOOP",
    "SETLIST",
    "CLOSURE",
    "VARARG",
    "EXTRAARG",
];

impl ToString for OpCode {
    fn to_string(&self) -> String {
        OP_NAMES[*self as usize].to_string()
    }
}